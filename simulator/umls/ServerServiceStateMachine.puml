@startuml
skinparam state {
  BackgroundColor LightYellow
  BorderColor Black
}

[*] --> NotReady : [ifstatus!=up_and_configured or service-status==down]
[*] --> Ready : [ifstatus==up_and_configured and service-status==up]

state NotReady
NotReady --> Ready : if-status-changed() or service-status-changed() [ifstatus==up_and_configured and service-status==up]

Ready --> NotReady : if-status-changed [ifstatus!=up_and_configured] / clearAllTimers()
Ready --> NotReady : service-status==down /clearAllTimers() \n send(StopOfferService)

state Ready {
  [*] --> InitialWaitPhase

  state InitialWaitPhase {
    state TimerSet1
    [*] --> TimerSet1: SetTimerInRange(INITIAL_DELAY_MIN,INITIAL_DELAY_MAX)
    TimerSet1 --> RepetitionPhase : Timer expired /send(OfferService)
  }

  state RepetitionPhase {
    state TimerSet2
    [*] --> TimerSet2 :  [REPETITIONS_MAX>0] /run=0 \n setTimer((2^run)*REPETITIONS_BASE_DELAY)
    TimerSet2 --> TimerSet2 : receive(FindService) / waitAndSend(OfferService) \n resetTimer()
    TimerSet2 --> TimerSet2 : Timer expired [run<REPETITIONS_MAX] / send(OfferService) \n run++ \n setTimer((2^run)*REPETITIONS_BASE_DELAY)
    TimerSet2 --> MainPhase : Timer expired [run==REPETITIONS_MAX]
    [*] --> MainPhase : [REPETITIONS_MAX==0]
  }

  state MainPhase {
    state TimerSet3
    [*] --> TimerSet3 : /setTimer(CYCLIC_ANNOUNCE_DELAY) \n send(OfferService)
    TimerSet3 --> TimerSet3 : Timer expired / setTimer(CYCLIC_ANNOUNCE_DELAY) \n send(OfferService)
    TimerSet3 --> TimerSet3 : receive(FindService) / waitAndSend(OfferService) \n resetTimer()
  }
}

@enduml
