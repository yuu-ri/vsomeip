@startuml
skinparam state {
  BackgroundColor LightYellow
  BorderColor Black
}

[*] --> NotReady : [ifstatus!=up_and_configured or service-status==down]
[*] --> Ready : [ifstatus==up_and_configured or service-status==up]

state NotReady
NotReady --> Ready : if-status-changed() or service-status-changed() [ifstatus==up_and_configured and service-status==up]

state Ready {
  [*] --> InitialWaitPhase

  state InitialWaitPhase {
    [*] --> TimerSet
    TimerSet --> RepetitionPhase : Timer expired
  }

  state RepetitionPhase {
    [*] --> TimerSet
    TimerSet --> RepetitionPhase : Timer expired [run<REPETITIONS_MAX] / send(OfferService) run++ setTimer((2^run)*REPETITIONS_BASE_DELAY)
    TimerSet --> MainPhase : Timer expired [run==REPETITIONS_MAX]
    TimerSet --> TimerSet : receive(FindService) / waitAndSend(OfferService) resetTimer()
  }

  state MainPhase {
    [*] --> TimerSet
    TimerSet --> TimerSet : Timer expired / setTimer(CYCLIC_ANNOUNCE_DELAY) send(OfferService)
    TimerSet --> TimerSet : receive(FindService) / waitAndSend(OfferService) resetTimer()
  }

  Ready --> NotReady : if-status-changed [ifstatus!=up_and_configured] / clearAllTimers()
  Ready --> NotReady : send(StopOfferService)
}

@enduml
