@startuml
skinparam state {
  BackgroundColor LightYellow
  BorderColor Black
}

[*] --> NotRequested : [Service Not Requested]
[*] --> RequestedButNotReady : [Requested and ifstatus!=up_and_configured]
[*] --> SearchingForService : ServiceRequested\nand if-status=up_and_configured

state NotRequested {
  [*] --> ServiceNotSeen
  
  state ServiceNotSeen
  ServiceNotSeen --> ServiceSeen : receive(OfferService) /setTimer(TTL)

  state ServiceSeen 
  ServiceSeen --> ServiceNotSeen : if-status-changed() [ifstatus!=up_and_configured]
  ServiceSeen --> ServiceNotSeen : Timer expired (TTL)
  ServiceSeen --> ServiceNotSeen : receive(StopServiceOffer)
  ServiceSeen --> ServiceSeen : receive(OfferService) /setTimer(TTL)
  ServiceSeen --> ServiceReady : InternalServiceRequest [ifstatus==up_and_configured]
}

NotRequested --> RequestedButNotReady : InternalServiceRequest [ifstatus!=up_and_configured]

state RequestedButNotReady

RequestedButNotReady --> SearchingForService :  if-status-changed() [ifstatus!=up_and_configured]

state SearchingForService {
    [*] --> InitialWaitPhase
    
    state InitialWaitPhase {
      state TimerSet1
      [*] --> TimerSet1: /setTimerInRange(INITIAL_DELAY_MIN, INITIAL_DELAY_MAX)
      TimerSet1 --> RepetitionPhase : Timer expired\nsend(FindService)
    }
    
    state RepetitionPhase {
      state TimerSet2
      [*] --> TimerSet2 : [REPETITONS_MAX>0] /run=0 \n setTimer(2^run * REPETITIONS_BASE_DELAY)
      TimerSet2 --> TimerSet2 : Timer expired[run < REPETITIONS_MAX] \n send(FindService) \n run++ \n setTimer(2^run * REPETITIONS_BASE_DELAY)
    }
    RepetitionPhase --> Stopped: Repetition expired \n [run>=REPETITIONS_MAX]
    RepetitionPhase --> Stopped: WITH receive(StopOfferService)
}

SearchingForService --> RequestedButNotReady: if-status-changed() [ifstatus!=up_and_configured] /cancelTimer(TTL)

SearchingForService --> ServiceReady : receive(OfferService) \n setTimer(TTL)

state Main {
  state ServiceReady
  ServiceReady --> ServiceReady : receive(OfferService) \n resetTimer(TTL)
  ServiceReady --> SearchingForService : Timer expired (TTL)
  ServiceReady --> ServiceSeen : [ServiceNotRequested]
  ServiceReady --> Stopped : receive(StopOfferService) /cancelTimer(TTL)
  state Stopped 
  Stopped --> ServiceReady : receive(OfferService) \n resetTimer(TTL)
  Stopped --> ServiceNotSeen : [ServiceNotRequested]
}
@enduml
